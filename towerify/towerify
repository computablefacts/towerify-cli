#!/usr/bin/env bash
# This script was generated by bashly 1.1.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 ou plus est nécessaire\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
towerify_usage() {
  if [[ -n $long_usage ]]; then
    printf "towerify - Towerify CLI. See https://docs.towerify.io/\n"
    echo

  else
    printf "towerify - Towerify CLI. See https://docs.towerify.io/\n"
    echo

  fi

  printf "%s\n" "Usage :"
  printf "  towerify [OPTIONS] COMMAND\n"
  printf "  towerify [COMMAND] --help | -h\n"
  printf "  towerify --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commandes :"
  printf "  %s   Initialise une nouvelle application\n" "$(bold "init")  "
  printf "  %s   Déploie une application\n" "$(bold "deploy")"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options :"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(bold "--debug, -d")"
    printf "    Mode DEBUG\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(bold "--help, -h")"
    printf "    Affiche cette aide\n"
    echo
    printf "  %s\n" "$(bold "--version, -v")"
    printf "    Affiche le numéro de version\n"
    echo

  fi
}

# :command.usage
towerify_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "towerify init\n"
    echo

    printf "  Initialise une nouvelle application\n  \n  Vous devez être dans le répertoire de l'application avant d'utiliser cette\n  commande.\n"
    echo

  else
    printf "towerify init - Initialise une nouvelle application\n"
    echo

  fi

  printf "%s\n" "Usage :"
  printf "  towerify init [NAME] [TYPE] [OPTIONS]\n"
  printf "  towerify init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options :"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(bold "--debug, -d")"
    printf "    Mode DEBUG\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(bold "--force, -f")"
    printf "    Efface la configuration existante\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(bold "--help, -h")"
    printf "    Affiche cette aide\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments :"

    # :argument.usage
    printf "  %s\n" "$(bold "NAME")"
    printf "    Nom de l'application\n"
    echo

    # :argument.usage
    printf "  %s\n" "$(bold "TYPE")"
    printf "    Type de l'application\n"
    printf "    Valeurs possibles : ask, static, lamp\n"
    printf "    Defaut : ask\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Exemples :"
    printf "  towerify init\n"
    printf "  towerify init --force\n"
    echo

  fi
}

# :command.usage
towerify_deploy_usage() {
  if [[ -n $long_usage ]]; then
    printf "towerify deploy - Déploie une application\n"
    echo

  else
    printf "towerify deploy - Déploie une application\n"
    echo

  fi

  printf "%s\n" "Usage :"
  printf "  towerify deploy [OPTIONS]\n"
  printf "  towerify deploy --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options :"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(bold "--debug, -d")"
    printf "    Mode DEBUG\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(bold "--env, -e ENV")"
    printf "    Environnement\n"
    printf "    Valeurs possibles : dev, staging, prod\n"
    printf "    Defaut : dev\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(bold "--help, -h")"
    printf "    Affiche cette aide\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/ask.sh
ask_string() {
  read -p "> " answer
  echo $answer
}

ask_choices() {
  choices=("$@")
  choices_count=${#choices[@]}

  [[ $choices_count -eq 0 ]] && echo "$(red_bold "${BASH_SOURCE[1]} line ${BASH_LINENO[0]}: ${FUNCNAME[0]}() need at least a choice as first argument")" >&2 && exit 1

  [[ $choices_count -ge 10 ]] && echo "$(red_bold "${BASH_SOURCE[1]} line ${BASH_LINENO[0]}: ${FUNCNAME[0]}() accept a maximum of 9 arguments")" >&2 && exit 1

  PS3='Votre choix : '
  select opt in "${choices[@]}"
  do
      case $REPLY in
          [1-$choices_count])
              echo "$opt"
              break
              ;;
          *) ;;
      esac
  done
}

# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/common.sh
error_app_config_file_already_exists() {
  echo "$(red_bold "Le fichier $app_config_file existe déjà dans ce répertoire.")"
  echo
  echo "Si vous voulez effacer cette configuration pour en créer une nouvelle, utilisez :"
  echo "  $(bold "towerify init --force")"
}

error_app_config_file_does_not_exist() {
  echo "$(red_bold "Le fichier $app_config_file n'existe pas dans ce répertoire.")"
  echo
  echo "Si vous voulez initialiser cette application, utilisez :"
  echo "  $(bold "towerify init")"
}

display_question() {
  echo "$(bold "? $1 ?")"
}

# src/lib/config.sh

config_show() {
  config_load
  ini_show
}

config_get() {
  local key="$1"
  local default_value="$2"

  config_load
  echo "${ini["$key"]:-$default_value}"
}

config_set() {
  local key="$1"
  shift
  local value="$*"

  config_load
  ini["$key"]="$value"
  config_save
}

config_del() {
  local key="$1"

  config_load
  unset "ini[$key]"
  config_save
}

config_keys() {
  config_load
  ini_keys
}

config_has_key() {
  [[ $(config_get "$1") ]]
}

config_reload() {
  declare -g config_loaded=false
  config_load
}

config_load() {
  [[ "$config_loaded" == "true" ]] && return

  declare -g CONFIG_FILE=${CONFIG_FILE:=config.ini}
  declare -g config_loaded=true
  [[ -f "$CONFIG_FILE" ]] || touch "$CONFIG_FILE"
  ini_load "$CONFIG_FILE"
}

config_save() {
  ini_save "$CONFIG_FILE"
}

# src/lib/filters.sh
filter_app_config_should_not_exist() {
  [[ -f $app_config_file ]] && echo "$(error_app_config_file_already_exists)"
}

filter_app_config_should_exist() {
  [[ -f $app_config_file ]] || echo "$(error_app_config_file_does_not_exist)"
}

# src/lib/globals.sh
declare -g app_config_file=".towerify.yaml"

# src/lib/ini.sh

ini_load() {
  declare -gA ini

  local ini_file="$1"

  local section=""
  local key=""
  local value=""
  local section_regex="^\[(.+)\]"
  local key_regex="^([^ =]+) *= *(.*) *$"
  local comment_regex="^;"

  while IFS= read -r line; do
    if [[ $line =~ $comment_regex ]]; then
      continue
    elif [[ $line =~ $section_regex ]]; then
      section="${BASH_REMATCH[1]}."
    elif [[ $line =~ $key_regex ]]; then
      key="${BASH_REMATCH[1]}"
      value="${BASH_REMATCH[2]}"
      [[ $value == *\$* ]] && eval "value=\"$value\""
      ini["${section}${key}"]="$value"
    fi
  done <"$ini_file"
}

ini_save() {
  declare -gA ini

  local ini_file="$1"

  local current_section=""
  local has_free_keys=false

  rm -f "$ini_file"

  for key in $(ini_keys); do
    [[ $key == *.* ]] && continue
    has_free_keys=true
    value="${ini[$key]}"
    echo "$key = $value" >>"$ini_file"
  done

  [[ "${has_free_keys}" == "true" ]] && echo >>"$ini_file"

  for key in $(ini_keys); do
    [[ $key == *.* ]] || continue
    value="${ini[$key]}"
    IFS="." read -r section_name key_name <<<"$key"

    if [[ "$current_section" != "$section_name" ]]; then
      [[ $current_section ]] && echo >>"$ini_file"
      echo "[$section_name]" >>"$ini_file"
      current_section="$section_name"
    fi

    echo "$key_name = $value" >>"$ini_file"
  done
}

ini_show() {
  declare -gA ini

  for key in $(ini_keys); do
    echo "$key = ${ini[$key]}"
  done
}

ini_keys() {
  declare -gA ini

  local keys=("${!ini[@]}")
  for a in "${keys[@]}"; do echo "$a"; done | sort
}

# :command.command_functions
# :command.function
towerify_init_command() {
  # src/cmd/init.sh
  # Paramétrage
  debug=${args[--debug]:-0}
  name=${args[name]:-ask}
  type=${args[type]:-ask}

  # Debug arguments
  [[ $debug = 1 ]] && inspect_args

  # Ask for name if needed
  if [[ "$name" = "ask" ]]; then
    display_question "Quel est le nom de votre application"
    name=$(ask_string)
    echo
  fi

  [[ $debug = 1 ]] && echo "name=$name"

  # Ask for type if needed
  if [[ "$type" = "ask" ]]; then
    display_question "Choissisez un type d'application"
    type=$(ask_choices "static" "lamp")
    echo
  fi

  [[ $debug = 1 ]] && echo "type=$type"

  echo "$(green_bold "Application $name initialisée")"
  echo
  echo "Pour déployer cette application, utilisez :"
  echo "  $(bold "towerify deploy")"
  echo

}

# :command.function
towerify_deploy_command() {
  # src/cmd/deploy.sh
  echo "# this file is located in 'src/cmd/deploy.sh'"
  echo "# code for 'towerify deploy' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        towerify_usage
        exit
        ;;

      # :flag.case
      --debug | -d)

        # :flag.case_no_arg
        args['--debug']=1
        shift
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v curl >/dev/null 2>&1; then
    deps['curl']="$(command -v curl | head -n1)"
  else
    printf "dépendance manquante : curl\n" >&2
    printf "%s\n" "run 'sudo apt-get install -y curl'" >&2
    exit 1
  fi

  if command -v wget >/dev/null 2>&1; then
    deps['wget']="$(command -v wget | head -n1)"
  else
    printf "dépendance manquante : wget\n" >&2
    printf "%s\n" "run 'sudo apt-get install -y wget'" >&2
    exit 1
  fi

  if command -v yq >/dev/null 2>&1; then
    deps['yq']="$(command -v yq | head -n1)"
  else
    printf "dépendance manquante : yq\n" >&2
    printf "%s\n" "run 'sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq'" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      towerify_init_parse_requirements "$@"
      shift $#
      ;;

    deploy)
      action="deploy"
      shift
      towerify_deploy_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      towerify_usage >&2
      exit 1
      ;;

    *)
      printf "commande invalide : %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "option invalide : %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "argument invalide : %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
towerify_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        towerify_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --debug | -d)

        # :flag.case_no_arg
        args['--debug']=1
        shift
        ;;

      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "option invalide : %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        elif [[ -z ${args['type']+x} ]]; then

          args['type']=$1
          shift
        else
          printf "argument invalide : %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['type']:-} ]] || args['type']="ask"

  # :command.whitelist_filter
  if [[ -n ${args['type']} ]] && [[ ! ${args['type']} =~ ^(ask|static|lamp)$ ]]; then
    printf "%s\n" "L'argument type doit être une de ces valeurs : ask, static, lamp" >&2
    exit 1
  fi

}

# :command.parse_requirements
towerify_deploy_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        towerify_deploy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="deploy"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --debug | -d)

        # :flag.case_no_arg
        args['--debug']=1
        shift
        ;;

      # :flag.case
      --env | -e)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--env']="$2"
          shift
          shift
        else
          printf "%s\n" "--env doit avoir un argument : --env, -e ENV" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "option invalide : %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "argument invalide : %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--env']:-} ]] || args['--env']="dev"

  # :command.whitelist_filter
  if [[ ${args['--env']} ]] && [[ ! ${args['--env']} =~ ^(dev|staging|prod)$ ]]; then
    printf "%s\n" "L'option --env doit être une de ces valeurs : dev, staging, prod" >&2
    exit 1
  fi

  # :command.user_filter
  filter_error=$(filter_app_config_should_exist)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -euo pipefail

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "init") towerify_init_command ;;
    "deploy") towerify_deploy_command ;;
  esac
}

initialize
run "$@"
