pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }

    parameters {
        string(name: 'app_name', trim: true, description: 'Your Towerify application name for the secrets')
        string(name: 'app_env', trim: true, defaultValue: 'dev', description: 'Environment name for the secrets of the application')
        choice(name: 'operation', choices: ['list', 'set', 'unset'], description: '''Choose the secret operation:
            - list = return the list of all the secrets
            - set = add or modify a secret (parameters secret_key and value are mandatory)
            - unset = delete a secret (parameter secret_key is mandatory)
        ''')
        password(name: 'secret_key', defaultValue: 'none', description: 'Key of the secret')
        password(name: 'secret_value', defaultValue: 'none', description: 'Value of the secret')
    }

    stages {
        stage('Dump parameters') {
            steps {
                script {
                    echo "app_name: ${app_name}"
                    echo "app_env: ${app_env}"
                    echo "operation: ${operation}"
                    echo 'secret_key: ${secret_key}'
                    echo 'secret_value: ${secret_value}'
                }
            }
        }

        stage('Create GPG key') {
            steps {
                script {
                    sh '''
                        gpg_key_id="jenkins@towerify"

                        # Vérifier si la clé existe
                        if gpg --list-secret-keys | grep -q "$gpg_key_id"; then
                            echo "La clé GPG avec l'ID $gpg_key_id existe."
                        else
                            echo "La clé GPG avec l'ID $gpg_key_id n'existe pas. Création en cours..."
                            gpg --batch --passphrase '' --quick-gen-key "$gpg_key_id"
                        fi
                    '''
                }
            }
        }

        stage('Initialise passwords store') {
            steps {
                script {
                    sh '''
                        gpg_key_id="jenkins@towerify"

                        echo "$HOME"

                        if [ -e "$HOME/.password-store/.gpg-id" ]; then
                            echo "Password store already initialised."
                            if [ "$(cat $HOME/.password-store/.gpg-id)" != "$gpg_key_id" ]; then
                                echo "ERROR: Password store already initialised with a wrong key!"
                                exit 1
                            fi
                        else
                            echo "Password store will be initialised."
                            pass init "$gpg_key_id"
                            echo "Password store initialised."
                        fi
                    '''
                }
            }
        }

        stage('operation set') {
            when {
                expression { params.operation == 'set' }
            }
            steps {
                writeFile file: 'secret_set.sh', text: 'echo $secret_value | pass insert $app_name/$app_env/$secret_key --echo'
                script {
                    sh 'chmod +x secret_set.sh'
                    sh './secret_set.sh'
                    sh 'rm secret_set.sh'
                }
            }
        }

        stage('operation unset') {
            when {
                expression { params.operation == 'unset' }
            }
            steps {
                script {
                    sh 'pass delete $app_name/$app_env/$secret_key --force'
                    sh 'pass list'
                }
            }
        }

        stage('operation list') {
            when {
                expression { params.operation == 'list' }
            }
            steps {
                script {
                    sh 'pass list $app_name/$app_env'
                }
            }
        }
    }
}
