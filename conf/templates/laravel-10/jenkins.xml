<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1360.vc6700e3136f5">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">
      <jobProperties>
        <string>org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty</string>
      </jobProperties>
      <triggers/>
      <parameters>
        <string>APP_ENV</string>
        <string>TOWERIFY_MAIN_DOMAIN</string>
        <string>app.tar.gz</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <io.jenkins.plugins.file__parameters.StashedFileParameterDefinition plugin="file-parameters@316.va_83a_1221db_a_7">
          <name>app.tar.gz</name>
        </io.jenkins.plugins.file__parameters.StashedFileParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TOWERIFY_MAIN_DOMAIN</name>
          <description>Your Towerify main domain name</description>
          <defaultValue>myapps.addapps.io</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>APP_ENV</name>
          <description>Environment where the application will be deployed</description>
          <defaultValue>dev</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3806.va_3a_6988277b_2">
    <script>// Global variables
def app_config = null
def dockerfile_filename = &apos;Dockerfile&apos;
def docker_image_name = null
def docker_image_tag = null

def dockercompose_filename = &apos;docker-compose.yaml&apos;

def app_type = &apos;laravel-10&apos;

pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }

    parameters {
        stashedFile &apos;app.tar.gz&apos;
        string(name: &apos;TOWERIFY_MAIN_DOMAIN&apos;, defaultValue: &apos;myapps.addapps.io&apos;, description: &apos;Your Towerify main domain name&apos;)
        string(name: &apos;APP_ENV&apos;, defaultValue: &apos;dev&apos;, description: &apos;Environment where the application will be deployed&apos;)
    }

    environment {
        ENV_DOCKER_TAG = &quot;${APP_ENV}-latest&quot;
        TOWERIFY_APP_TEMPLATE_PATH = &apos;docker_compose_ynh&apos;
        DOCKER_REGISTRY_CRED_ID = &apos;docker-hub-cf-cred&apos; // credential defined in Jenkins
    }

    stages {
        stage(&apos;Get templates from git&apos;) {
            steps {
                checkout changelog: false, scm: scmGit(branches: [[name: &apos;*/main&apos;]], extensions: [[$class: &apos;RelativeTargetDirectory&apos;, relativeTargetDir: &apos;cli&apos;]], userRemoteConfigs: [[url: &apos;https://github.com/computablefacts/towerify-cli&apos;]])
            }
        }

        stage(&apos;Uncompress&apos;) {
            steps {
                sh &apos;&apos;&apos;
                    pwd
                    ls -alh
                    rm -Rf ./app
                    mkdir -p ./app
                &apos;&apos;&apos;
                dir(&apos;app&apos;) {
                    sh &apos;pwd&apos;
                    // TODO: use withFileParameter, see: https://www.jenkins.io/doc/pipeline/steps/file-parameters/#withfileparameter-bind-file-parameter
                    /* groovylint-disable-next-line DuplicateStringLiteral */
                    unstash &apos;app.tar.gz&apos;
                    sh &apos;&apos;&apos;
                        ls -alh
                        tar -xvf app.tar.gz
                        ls -alh
                    &apos;&apos;&apos;
                }
                sh &apos;ls -alh&apos;
            }
        }

        stage(&apos;Read config&apos;) {
            steps {
                script {
                    app_config = readYaml file: &apos;app/towerify/config.yaml&apos;
                    app_name = app_config.get(&apos;name&apos;) &amp;&amp; app_config.name ? app_config.name : null
                    if (!app_name) {
                        error &apos;Application name should be defined (key name:)&apos;
                    }
                    echo &quot;App name: ${app_name}&quot;
                    if (app_config.get(&apos;type&apos;) &amp;&amp; app_config.type != &quot;${app_type}&quot;) {
                        error &quot;Wrong app type (should be ${app_type})&quot;
                    }
                }
            }
        }

        stage(&apos;Prepare Dockerfile&apos;) {
            steps {
                script {
                    // If a Dockerfile key exists in app_config
                    if (app_config.get(&apos;config&apos;) &amp;&amp; app_config.config.get(&apos;dockerfile&apos;)) {
                        // we change the Dockerfile to use
                        dockerfile_filename = &apos;app/&apos; + app_config.config.dockerfile
                    } else {
                        // We use the default Dockerfile
                        dockerfile_filename = &quot;cli/conf/templates/${app_type}/Dockerfile&quot;
                    }

                    echo &quot;dockerfile_filename=${dockerfile_filename}&quot;
                    sh &quot;cat ${dockerfile_filename}&quot;

                    docker_image_name = &quot;computablefacts/${env.TOWERIFY_MAIN_DOMAIN}-${app_name}&quot;
                    docker_image_tag = sh(script: &quot;echo twr-${env.BUILD_TAG} | sed -r &apos;s#%2F#_#g&apos;&quot;, returnStdout: true).trim()
                    echo &quot;image=${docker_image_name}:${docker_image_tag}&quot;
                }
            }
        }

        stage(&apos;Prepare Docker Compose&apos;) {
            steps {
                script {
                    // If a dockercomposefile key exists in app_config
                    /* groovylint-disable-next-line DuplicateStringLiteral */
                    if (app_config.get(&apos;config&apos;) &amp;&amp; app_config.config.get(&apos;dockercomposefile&apos;)) {
                        // we change the Docker Compose file to use
                        /* groovylint-disable-next-line DuplicateStringLiteral */
                        dockercompose_filename = &apos;app/&apos; + app_config.config.dockercomposefile
                    } else {
                        // We use the default Docker Compose file
                        dockercompose_filename = &quot;cli/conf/templates/${app_type}/docker-compose.yaml&quot;
                    }

                    echo &quot;dockercompose_filename=${dockercompose_filename}&quot;
                    sh &quot;cat ${dockercompose_filename}&quot;
                }
            }
        }

        stage(&apos;Build Docker image&apos;) {
            steps {
                script {
                    // Build...
                    dockerImage = docker.build(&quot;${docker_image_name}&quot;, &quot;-f ${dockerfile_filename} ./app&quot;)
                    // .. and push to Docker Hub
                    docker.withRegistry(&apos;&apos;, &quot;${env.DOCKER_REGISTRY_CRED_ID}&quot;) {
                        dockerImage.push(&quot;${docker_image_tag}&quot;)
                    }
                }
            }
        }

        stage(&apos;Prepare Towerify App template&apos;) {
            steps {
                script {
                    towerify_app_id = &quot;${app_name}_${APP_ENV}&quot;
                    towerify_app_name_short = app_name.substring(0, 2)
                    towerify_app_domain = &quot;${APP_ENV}.${app_name}.${TOWERIFY_MAIN_DOMAIN}&quot;
                    towerify_app_path = &apos;/&apos;
                    towerify_app_not_installed = sh(script: &quot;sudo yunohost app list | grep ${towerify_app_id}&quot;, returnStatus: true)

                    // Read app_config to change domain and path to publish app
                    /* groovylint-disable-next-line DuplicateStringLiteral */
                    app_config_env = app_config.get(&apos;config&apos;) &amp;&amp; app_config.config.get(&apos;envs&apos;) &amp;&amp; app_config.config.envs.get(APP_ENV)
                        ? app_config.config.envs.get(APP_ENV)
                        : null
                    if (app_config_env) {
                        echo &apos;Specific env settings are defined&apos;
                        towerify_app_domain = app_config_env.get(&apos;domain&apos;) ? app_config_env.domain : towerify_app_domain
                        towerify_app_path = app_config_env.get(&apos;path&apos;) ? app_config_env.path : towerify_app_path
                    }

                    // Create domain (and LE certificate) on YunoHost if not already exists
                    towerify_domain_not_exist = sh(script: &quot;sudo yunohost domain list | grep ${towerify_app_domain}&quot;, returnStatus: true)
                    if (towerify_domain_not_exist == 1) {
                        sh &quot;sudo yunohost domain add ${towerify_app_domain}&quot;
                        sh &apos;sudo yunohost diagnosis run web dnsrecords --force&apos;
                        sh &quot;sudo yunohost domain cert install ${towerify_app_domain}&quot;
                    }

                    withCredentials([file(credentialsId: &quot;${towerify_app_id}&quot;, variable: &apos;envfile&apos;)]) {
                        sh &quot;cp ${envfile} ./.env&quot;
                    }

                    print &quot;APP_ENV=${APP_ENV}&quot;
                    print &quot;ENV_DOCKER_TAG=${env.ENV_DOCKER_TAG}&quot;
                    print &quot;towerify_app_id=${towerify_app_id}&quot;
                    print &quot;towerify_app_name_short=${towerify_app_name_short}&quot;
                    print &quot;towerify_app_domain=${towerify_app_domain}&quot;
                    print &quot;towerify_app_path=${towerify_app_path}&quot;
                    print &quot;towerify_app_not_installed=${towerify_app_not_installed}&quot;
                }

                /* groovylint-disable-next-line DuplicateListLiteral, DuplicateMapLiteral, DuplicateStringLiteral */
                checkout changelog: false, scm: scmGit(branches: [[name: &apos;*/main&apos;]], extensions: [[$class: &apos;RelativeTargetDirectory&apos;, relativeTargetDir: &quot;${TOWERIFY_APP_TEMPLATE_PATH}&quot;]], userRemoteConfigs: [[url: &apos;https://github.com/computablefacts/docker_compose_ynh&apos;]])

                dir(TOWERIFY_APP_TEMPLATE_PATH) {
                    sh &apos;cp ../.env ./conf/.env&apos;
                    sh &quot;cp ../${dockercompose_filename} ./conf/docker-compose.yaml&quot;
                    sh &quot;./customize.sh --app-id ${towerify_app_id} --name &apos;${towerify_app_name_short} ${APP_ENV}&apos; &quot;
                    sh &quot;sed -ri &apos;s#__DOCKER_IMAGE_NAME__#${docker_image_name}#&apos; ./conf/docker-compose.yaml&quot;
                    sh &quot;sed -ri &apos;s/__DOCKER_IMAGE_TAG__/${docker_image_tag}/&apos; ./conf/docker-compose.yaml&quot;
                }
            }
        }
        stage(&apos;Towerify Publish&apos;) {
            steps {
                script {
                    docker.withRegistry(&apos;&apos;, &quot;${env.DOCKER_REGISTRY_CRED_ID}&quot;) {
                        dockerImage.push(&quot;${env.ENV_DOCKER_TAG}&quot;)
                    }
                }
                dir(TOWERIFY_APP_TEMPLATE_PATH) {
                    script {
                        if (towerify_app_not_installed == 1) {
                            sh &quot;sudo yunohost app install . --force --args=\&quot;domain=${towerify_app_domain}&amp;path=${towerify_app_path}&amp;init_main_permission=visitors\&quot; &quot;
                        } else {
                            sh &quot;sudo yunohost app upgrade ${towerify_app_id} --file . --force --no-safety-backup&quot;
                        }
                    }
                }
            }
        }
    }
    post {
        // Clean after build
        always {
            cleanWs deleteDirs: true, disableDeferredWipeout: true, notFailBuild: true
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>